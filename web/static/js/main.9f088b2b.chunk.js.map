{"version":3,"sources":["pages/control/Control.js","pages/monitor/Monitor.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paperRoot","display","margin","spacing","width","height","pathLayout","flexWrap","path","Control","classes","React","useState","checked","state","setState","Grid","container","className","item","xs","Typography","color","gutterBottom","noValidate","autoComplete","TextField","id","label","variant","fullWidth","Button","padding","Card","elevation","CardContent","Box","align","Switch","onChange","event","target","name","inputProps","cardSubscription","background","overflow","textlogSubscription","backgroundColor","marginTop","Monitor","justify","size","dangerouslySetInnerHTML","__html","TabPanel","props","children","value","index","other","role","hidden","aria-labelledby","p","a11yProps","palette","paper","textAlign","text","secondary","App","setValue","AppBar","position","Tabs","newValue","aria-label","Tab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f088b2b.chunk.js","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Switch from '@material-ui/core/Switch';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paperRoot: {\n    display: \"inline-block\",\n    // flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"100%\",\n      height: theme.spacing(50),\n    },\n  },\n  pathLayout: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: theme.spacing(12),\n    },\n  },\n  path: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Control() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    checked: true,\n  });\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n  return (\n    <Grid container spacing={3} className={classes.root}>\n      <Grid item xs={12} className={classes.pathLayout}>\n        <Typography color=\"textPrimary\" gutterBottom className={classes.path}>\n          Mosquitto Path:\n        </Typography>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"outlined-basic\"\n            label=\"path\"\n            variant=\"outlined\"\n            fullWidth\n          />\n        </form>\n        <Button variant=\"contained\" color=\"primary\" padding=\"10px\">\n          Set\n        </Button>\n      </Grid>\n      <Grid item xs={12} className={classes.paperRoot}>\n        <Card elevation={5}>\n          <CardContent>\n            <Box align=\"center\">\n                <Typography color=\"textSecondary\" gutterBottom align=\"center\">\n                Server Status: ON\n                </Typography>\n                <Switch\n                    checked={state.checked}\n                    onChange={handleChange}\n                    color=\"primary\"\n                    name=\"checked\"\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\n                />\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Switch from \"@material-ui/core/Switch\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paperRoot: {\n    display: \"inline-block\",\n    // flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"100%\",\n      height: theme.spacing(50),\n    },\n  },\n  pathLayout: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: theme.spacing(12),\n    },\n  },\n  path: {\n    margin: theme.spacing(1),\n  },\n  cardSubscription: {\n    background: \"#000000\",\n    height: theme.spacing(48),\n    overflow: \"auto\",\n  },\n  textlogSubscription: {\n    color: \"#9bed5c\",\n    backgroundColor: \"#333232\",\n    marginTop: theme.spacing(.5),\n  },\n}));\n\nexport default function Monitor() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    checked: true,\n  });\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n  return (\n    <Grid container spacing={3} className={classes.root}>\n      <Grid item xs={12} className={classes.pathLayout}>\n        <Typography color=\"textPrimary\" gutterBottom className={classes.path}>\n          Subscribe topic:\n        </Typography>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"outlined-basic\"\n            label=\"topic\"\n            variant=\"outlined\"\n            fullWidth\n          />\n        </form>\n        <Button variant=\"contained\" color=\"primary\" padding=\"10px\">\n          Set\n        </Button>\n      </Grid>\n      <Grid item xs={12} className={classes.paperRoot}>\n        <Box>\n          <Grid item xs={12}>\n            <Grid container justify=\"center\">\n              <Typography color=\"textSecondary\" gutterBottom align=\"center\">\n                Auto Update:\n              </Typography>\n              <Switch\n                checked={state.checked}\n                onChange={handleChange}\n                color=\"primary\"\n                name=\"checked\"\n                size=\"small\"\n                inputProps={{ \"aria-label\": \"primary checkbox\" }}\n              />\n            </Grid>\n          </Grid>\n          <Card elevation={5} className={classes.cardSubscription}>\n            <CardContent>\n              <Box align=\"left\">\n                <div\n                  className={classes.textlogSubscription}\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      '{ \"online\" : false, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}',\n                  }}\n                ></div>\n                <div\n                  className={classes.textlogSubscription}\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      '{ \"online\" : false, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}',\n                  }}\n                ></div>\n                <div\n                  className={classes.textlogSubscription}\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      '{ \"online\" : false, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}',\n                  }}\n                ></div>\n                <div\n                  className={classes.textlogSubscription}\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      '{ \"online\" : false, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}',\n                  }}\n                ></div>\n                <div\n                  className={classes.textlogSubscription}\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      '{ \"online\" : false, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}, \"tags\": { \"engine_speed\": 300 }}',\n                  }}\n                ></div>\n              </Box>\n            </CardContent>\n          </Card>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport PropTypes from 'prop-types';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nimport Control from './pages/control/Control';\nimport Monitor from './pages/monitor/Monitor';\n\nimport './App.css';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <AppBar position=\"static\">\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"fullWidth\">\n              <Tab label=\"Control\" {...a11yProps(0)} />\n              <Tab label=\"Monitor\" {...a11yProps(1)} />\n              <Tab label=\"Simulation\" {...a11yProps(2)} />\n            </Tabs>\n          </AppBar>\n        </Grid>\n        <Grid item xs={12}>\n          <TabPanel value={value} index={0}>\n            <Control/>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <Monitor/>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            Simulation page\n          </TabPanel>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}